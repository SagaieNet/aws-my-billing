#!/usr/bin/php
<?php
# Require
require 'AWSSDKforPHP/vendor/autoload.php';

# Service locator
use Aws\Common\Aws;
use Aws\CloudWatch\CloudWatchClient;
use Aws\CloudWatch\Enum\Unit;
use Aws\CloudWatch\Enum\Statistic;

class BillingStatus
{
/*
Usage : billingStatus('-1 days','now','3600','' or NULL);
*/
  private $cloudwatchClient;
  private $billingList = array();
  
  function __construct($awsConfigPath){
    # :DEBUG --
    echo "  initializing BillingStatus...\n";
    echo '    $awsConfigPath:';
    var_dump($awsConfigPath);
    # -- DEBUG:

    # AWS SDKが使用する設定ファイルが存在しない場合はエラー
    if(!file_exists($awsConfigPath)) {
      die("  Error: $awsConfigPath file not exist.\n");
    }

    # AWSの設定ファイルをロードしてAws Classを初期化
    $aws = Aws::factory($awsConfigPath);
    $this->cloudwatchClient = $aws->get('CloudWatch');
  }
  
  public function fetch($startTime,$endTime,$period,$serviceList){
    # :DEBUG --
    echo "  Fetching BillingStatus...\n";
    echo '    $serviceList:';
    var_dump($serviceList);
    echo '    $startTime:';
    var_dump($startTime);
    echo '    $endTime:';
    var_dump($endTime);
    echo '    $period:';
    var_dump($period);
    # -- DEBUG:

    # Cloudwatchから請求情報を取得
    if($serviceList === NULL OR $serviceList === "" OR count($serviceList) === 0){
      # Service Nameが指定されなかった場合は全サービスのトータル請求額を取得する
      # :DEBUG --
      echo "  Fetching Billing Statistics(ALL Service)...\n";
      # -- DEBUG:
      $result = $this->cloudwatchClient->getMetricStatistics(array(
        'Namespace'  => 'AWS/Billing',
        'MetricName' => 'EstimatedCharges',
        'StartTime'  => strtotime($startTime),
        'EndTime'    => strtotime($endTime),
        'Period'     => $period,
        'Unit'       => Unit::NONE,
        'Statistics' => array(Statistic::SUM),
        'Dimensions' => array(
          array('Name' => 'Currency','Value' => 'USD')
      )));

      $jstDatapoints = getJstDatapoints($result);
      # array_push($this->billingList,);

    }else{
      # Service Nameが指定された場合はそのサービスの請求額を取得する
      # :DEBUG --
      echo "  Fetching Billing Statistics...\n";
      # -- DEBUG:
      foreach($serviceList as $serviceName){
        # :DEBUG --
        echo "  Fetching:$serviceName...\n";
        # -- DEBUG:
        $result = $this->cloudwatchClient->getMetricStatistics(array(
          'Namespace'  => 'AWS/Billing',
          'MetricName' => 'EstimatedCharges',
          'StartTime'  => strtotime($startTime),
          'EndTime'    => strtotime($endTime),
          'Period'     => $period,
          'Unit'       => Unit::NONE,
          'Statistics' => array(Statistic::SUM),
          'Dimensions' => array(
            array('Name' => 'Currency','Value' => 'USD'),
            array('Name' => 'ServiceName','Value' => $serviceName)
      )));}
    }
  }
  
  # Timezone(JST)をセットしてDatapoint一覧を返す
  private functuon getJstDatapoints($result){
    $sumDatapoints = $result->getPath('Datapoints/*/Sum');
    $timestampDatapoints= $result->getPath('Datapoints/*/Timestamp');
    
    $i = 0;
    foreach ($timestampDatapoints as $val){
      $date = new DateTime($timestamp[$i]);
      $date->setTimezone(new DateTimeZone('JST'));
      $jstTimestamp = $date->getTimestamp();
      $i++;
    }
  }

}

$bs = new BillingStatus(__DIR__ . '/aws-config.php');
$ini = parse_ini_file(__DIR__ . '/config.ini');
$serviceList = explode(',',$ini['service_list']);
$bs->fetch('-1 days','now','3600',NULL);

/*
$aws = Aws::factory(__DIR__ . '/aws-config.php');
$client = $aws->get('CloudWatch');

# get service names


# Get Cloudwatch Metrics
foreach ($serviceNames as $serviceName){
  if ($serviceName != 'total'){
    $result = $client->getMetricStatistics(array(
      'Namespace'  => 'AWS/Billing',
      'MetricName' => 'EstimatedCharges',
      'StartTime'  => strtotime('-1 days'),
      'EndTime'    => strtotime('now'),
      'Period'     => '3600',
      'Unit'       => Unit::NONE,
      'Statistics' => array(Statistic::SUM),
      'Dimensions' => array(
        array('Name' => 'Currency','Value' => 'USD'),
        array('Name' => 'ServiceName','Value' => $serviceName)
        )
      )
    );
  }else{
    $result = $client->getMetricStatistics(array(
      'Namespace'  => 'AWS/Billing',
      'MetricName' => 'EstimatedCharges',
      'StartTime'  => strtotime('-1 days'),
      'EndTime'    => strtotime('now'),
      'Period'     => '3600',
      'Unit'       => Unit::NONE,
      'Statistics' => array(Statistic::SUM),
      'Dimensions' => array(
        array('Name' => 'Currency','Value' => 'USD')
        )
      )
    );
  }
*/
# $sum = $result->getPath('Datapoints/*/Sum');
# $timestamp = $result->getPath('Datapoints/*/Timestamp');
/*
  # Sort
  sort($sum);
  sort($timestamp);

  # Update RRD Files
  $i = 0;
  foreach ($sum as $val){
    $date = new DateTime($timestamp[$i]);
    # set Timezone(JST)
    $date->setTimezone(new DateTimeZone('JST'));
    $jstTimestamp = $date->getTimestamp();
    # Update RRD File
    $rrdUpdateResult = rrd_update(__DIR__ . "/rrd/{$serviceName}.rrd", "$jstTimestamp:$sum[$i]");
    if(!$rrdUpdateResult){
      echo __DIR__ . "/rrd/{$serviceName}.rrd の更新に失敗\n";
    }
    $i++;
  }

}

# Create Graph
$_colours = array("#EE799F","#FF7F00","#A2CD5A","#FFB90F","#7AC5CD","#5CACEE","#B3EE3A","#FF7256","#87CEFF");

$options = array(
  "--slope-mode",
  "--start", strtotime('-7 days'),
  "--end", strtotime('now'),
  "--title=AWS/Billing",
  "--width=550",
  "--height=300",
  "--step=3600",
  "--vertical-label=USD($)",
  "--color=SHADEA#FFFFFF",
  "--color=SHADEB#FFFFFF"
);

$i =0;
foreach ($serviceNames as $serviceName){
  array_push($options,"DEF:{$serviceName}=" . __DIR__ . "/rrd/{$serviceName}.rrd:total:LAST");
  if($serviceName != 'total'){
    array_push($options,"AREA:{$serviceName}{$_colours[$i%9]}:{$serviceName}:STACK");
  }else{
    array_push($options,"LINE1:{$serviceName}#000000:Total");
  }
  array_push($options,"GPRINT:{$serviceName}:LAST:Last %6.2lf USD($) \\n");
  $i++;
}

$ret = rrd_graph(__DIR__ . "/web/graph.gif", $options, count($options));
if (! $ret) {
  echo __DIR__ . "/web/graph.gif の作成に失敗\n";
}
*/
?>
